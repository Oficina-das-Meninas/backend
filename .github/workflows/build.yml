name: Deploy Spring Boot na VM

on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Selecione o ambiente'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Autenticar no GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Download config do Secret Manager
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v1
        with:
          secrets: |
            APP_CONFIG:projects/${{ vars.GCP_PROJECT_ID }}/secrets/application-${{ github.event.inputs.ENVIRONMENT }}-properties

      - name: Salvar application.properties
        run: |
          echo "${{ steps.secrets.outputs.APP_CONFIG }}" > application.properties

      - name: Build Spring Boot
        run: mvn clean package

      - name: Upload artefatos
        uses: actions/upload-artifact@v4
        with:
          name: springboot-build
          path: |
            target/*.jar
            application.properties


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artefatos
        uses: actions/download-artifact@v4
        with:
          name: springboot-build
          path: build/

      - name: Configurar SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Enviar artefatos para VM
        run: |
          VM_USER="${{ vars.VM_USER }}"
          VM_HOST="${{ vars.VM_HOST }}"

          if [[ "${{ github.event.inputs.ENVIRONMENT }}" == "development" ]]; then
            DEST_DIR="${{ vars.VM_DIR_DEV }}"
            SERVICE_NAME="${{ vars.SERVICE_DEV }}"
          else
            DEST_DIR="${{ vars.VM_DIR_PRD }}"
            SERVICE_NAME="${{ vars.SERVICE_PRD }}"
          fi

          echo "ðŸ“¤ Enviando arquivos para $VM_USER@$VM_HOST:$DEST_DIR ..."
          rsync -avz --delete build/*.jar $VM_USER@$VM_HOST:$DEST_DIR/
          rsync -avz --delete build/application.properties $VM_USER@$VM_HOST:$DEST_DIR/

          echo "ðŸ”„ Reiniciando serviÃ§o $SERVICE_NAME ..."
          ssh $VM_USER@$VM_HOST "systemctl --user restart $SERVICE_NAME"
          echo "âœ… ImplantaÃ§Ã£o concluÃ­da com sucesso!"  
